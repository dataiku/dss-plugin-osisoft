{
    "meta": {
        "label": "Assets values downloader",
        "description": "Retrieve PI values from list of tags",
        "icon": "icon-pi-system icon-cogs"
    },
    "kind": "PYTHON",
    "selectableFromDataset": "input_dataset",
    "inputRoles": [
        {
            "name": "input_dataset",
            "label": "Dataset containing paths or tags",
            "description": "",
            "arity": "UNARY",
            "required": true,
            "acceptsDataset": true
        }
    ],

    "outputRoles": [
        {
            "name": "api_output",
            "label": "Main output displayed name",
            "description": "",
            "arity": "UNARY",
            "required": true,
            "acceptsDataset": true
        }
    ],
    "params": [
        {
            "type": "SEPARATOR",
            "label": "Authentication"
        },
        {
            "name": "credentials",
            "label": "User preset",
            "type": "PRESET",
            "parameterSetId": "basic-auth"
        },
        {
            "name": "show_advanced_parameters",
            "label": "Show advanced parameters",
            "type": "BOOLEAN",
            "definition": "",
            "defaultValue": false
        },
        {
            "name": "use_server_url_column",
            "label": "Use server value per row",
            "visibilityCondition": "model.show_advanced_parameters==true && false",
            "description": "",
            "type": "BOOLEAN",
            "defaultValue": false
        },
        {
            "visibilityCondition": "(model.use_server_url_column==true) && (model.show_advanced_parameters==true)",
            "name": "server_url_column",
            "label": "Server domain columnn",
            "description": "Should match the required path for each row",
            "type": "COLUMN",
            "columnRole": "input_dataset"
        },
        {
            "visibilityCondition": "(model.use_server_url_column==false) && (model.show_advanced_parameters==true)",
            "name": "server_url",
            "label": "Server URL",
            "type": "STRING",
            "definition": "https://my_server:8082",
            "defaultValue": ""
        },
        {
            "name": "is_ssl_check_disabled",
            "label": "Disable SSL check",
            "visibilityCondition": "model.show_advanced_parameters==true",
            "type": "BOOLEAN",
            "definition": "",
            "defaultValue": false
        },
        {
            "name": "ssl_cert_path",
            "label": "Path to SSL certificate",
            "type": "STRING",
            "description": "(optional)",
            "visibilityCondition": "model.show_advanced_parameters==true && model.is_ssl_check_disabled==false",
            "mandatory": false
        },
        {
            "name": "must_convert_object_to_string",
            "label": "Convert objects to string",
            "visibilityCondition": "model.show_advanced_parameters==true",
            "type": "BOOLEAN",
            "description": "(for direct output to databases)",
            "defaultValue": false
        },
        {
            "name": "is_debug_mode",
            "label": "Verbose logging",
            "visibilityCondition": "model.show_advanced_parameters==true",
            "type": "BOOLEAN",
            "description": "",
            "defaultValue": false
        },
        {
            "type": "SEPARATOR",
            "description": "Source"
        },
        {
            "name": "path_column",
            "label": "Path column",
            "description": "",
            "type": "COLUMN",
            "columnRole": "input_dataset"
        },
        {
            "type": "SEPARATOR",
            "description": "Time",
            "visibilityCondition": "['InterpolatedData', 'RecordedData', 'PlotData', 'EventFrames'].includes(model.data_type)"
        },
        {
            "type": "SEPARATOR",
            "description": "Date / time in yyyy-mm-ddThh:mm:ssZ or <a href='https://docs.aveva.com/bundle/pi-web-api-reference/page/help/topics/time-strings.html'>Pi Time String</a> format",
            "visibilityCondition": "['InterpolatedData', 'RecordedData', 'PlotData', 'EventFrames'].includes(model.data_type)"
        },
        {
            "name": "use_start_time_column",
            "label": "Use start time value per row",
            "description": "Description here",
            "visibilityCondition": "false && (['InterpolatedData', 'RecordedData', 'PlotData', 'EventFrames'].includes(model.data_type))",
            "type": "BOOLEAN",
            "defaultValue": false
        },
        {
            "visibilityCondition": "model.use_start_time_column==true && (['InterpolatedData', 'RecordedData', 'PlotData', 'EventFrames'].includes(model.data_type))",
            "name": "start_time_column",
            "label": "Start times' column",
            "description": "Optional",
            "type": "COLUMN",
            "columnRole": "input_dataset"
        },
        {
            "visibilityCondition": "model.use_start_time_column==false && (['InterpolatedData', 'RecordedData', 'PlotData', 'EventFrames', 'SummaryData'].includes(model.data_type))",
            "name": "start_time",
            "label": "Start time",
            "description": "Optional",
            "type": "STRING",
            "defaultValue": ""
        },
        {
            "name": "use_end_time_column",
            "label": "Use start time value per row",
            "description": "",
            "visibilityCondition": "false && (['InterpolatedData', 'RecordedData', 'PlotData', 'EventFrames'].includes(model.data_type))",
            "type": "BOOLEAN",
            "defaultValue": false
        },
        {
            "visibilityCondition": "model.use_end_time_column==true && (['InterpolatedData', 'RecordedData', 'PlotData', 'EventFrames'].includes(model.data_type))",
            "name": "end_time_column",
            "label": "End times' column",
            "description": "Optional",
            "type": "COLUMN",
            "columnRole": "input_dataset"
        },
        {
            "visibilityCondition": "model.use_end_time_column==false && (['InterpolatedData', 'RecordedData', 'PlotData', 'EventFrames', 'SummaryData'].includes(model.data_type))",
            "name": "end_time",
            "label": "End time",
            "description": "Optional",
            "type": "STRING",
            "defaultValue": ""
        },
        {
            "type": "SEPARATOR",
            "description": "Interpolation",
            "visibilityCondition": "['InterpolatedData'].includes(model.data_type)"
        },
        {
            "name": "interval",
            "label": "Interval",
            "visibilityCondition": "['InterpolatedData'].includes(model.data_type)",
            "description": "Optional",
            "type": "STRING",
            "defaultValue": ""
        },
        {
            "name": "sync_time",
            "label": "Sync time",
            "visibilityCondition": "['InterpolatedData'].includes(model.data_type)",
            "description": "Optional",
            "type": "STRING",
            "defaultValue": ""
        },
        {
            "name": "boundary_type",
            "label": "Boundary type",
            "visibilityCondition": "['InterpolatedData', 'RecordedData'].includes(model.data_type)",
            "type": "SELECT",
            "selectChoices":[
                {"value": "Inside", "label": "Inside"},
                {"value": "Outside", "label": "Outside"}
            ],
            "defaultValue": "Inside"
        },
        {
            "type": "SEPARATOR",
            "description": "Data to retrieve"
        },
        {
            "name": "data_type",
            "label": "Data type",
            "type": "SELECT",
            "selectChoices":[
                {"value": "InterpolatedData", "label": "Interpolated"},
                {"value": "PlotData", "label": "Plot"},
                {"value": "RecordedData", "label": "Recorded"},
                {"value": "Elements", "label": "Elements"},
                {"value": "Template", "label": "Template"},
                {"value": "SummaryData", "label": "SummaryData"},
                {"value": "Value", "label": "Value"},
                {"value": "EndValue", "label": "EndValue"},
                {"value": "Categories", "label": "Categories"},
                {"value": "Attributes", "label": "Attributes"},
                {"value": "EventFrames", "label": "Event frames"}
            ],
            "defaultValue": "RecordedData"
        },
        {
            "name": "summary_type",
            "label": "Summary type",
            "type": "MULTISELECT",
            "selectChoices":[
                {"value": "Total", "label": "Total"},
                {"value": "Average", "label": "Average"},
                {"value": "Minimum", "label": "Minimum"},
                {"value": "Maximum", "label": "Maximum"},
                {"value": "Range", "label": "Range"},
                {"value": "StdDev", "label": "Standard deviation"},
                {"value": "PopulationStdDev", "label": "Population standard deviation"},
                {"value": "Count", "label": "Count"},
                {"value": "PercentGood", "label": "Percent good"},
                {"value": "TotalWithUOM", "label": "Total with UOM"},
                {"value": "All", "label": "All"},
                {"value": "AllForNonNumeric", "label": "All for non numeric"}
            ],
            "visibilityCondition": "model.data_type == 'SummaryData'"
        },
        {
            "name": "summary_duration",
            "label": "Summary duration",
            "visibilityCondition": "model.data_type == 'SummaryData'",
            "description": "Optional",
            "type": "STRING",
            "defaultValue": ""
        },
        {
            "name": "max_count",
            "label": "Max count",
            "visibilityCondition": "false && ['RecordedData'].includes(model.data_type)",
            "description": "",
            "type": "INT",
            "defaultValue": 1000
        }
    ],
    "resourceKeys": []
}
